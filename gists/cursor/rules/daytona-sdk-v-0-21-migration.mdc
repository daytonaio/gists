# Daytona SDK v0.21.0 Migration Guide

## TypeScript Migration Patterns

### Creating Snapshots (Replace Image Creation)

**Before (v0.20.2):**
```typescript
// Creating a pre-built image
const imageName = `example:${Date.now()}`;
const image = Image.debianSlim("3.13")
await daytona.createImage(imageName, image, { onLogs: console.log });

// Using the pre-built image
const sandbox = await daytona.create({ image: imageName });
```

**After (v0.21.0):**
```typescript
// Creating a snapshot
const snapshotName = `example:${Date.now()}`;
const image = Image.debianSlim("3.13")
await daytona.snapshot.create(
  {
    name: snapshotName,
    image,
    resources: {
      cpu: 1,
      memory: 1,
      disk: 3,
    },
  },
  { onLogs: console.log }
);

// Using the snapshot
const sandbox = await daytona.create({
  snapshot: snapshotName,
});
```

### Sandbox Creation Parameter Changes

**Before (v0.20.2):**
```typescript
// Basic creation
const sandbox = await daytona.create();

// With image and callback
const sandbox = await daytona.create(
  {
    image: Image.debianSlim("3.12"),
    resources: {
      cpu: 2,
      memory: 4,
      disk: 20,
    },
  },
  { onImageBuildLogs: console.log }
);
```

**After (v0.21.0):**
```typescript
// Basic creation (unchanged)
const sandbox = await daytona.create();

// Creating from image (dynamic snapshot created)
const sandbox = await daytona.create(
  {
    image: Image.debianSlim("3.12"),
    resources: {
      cpu: 2,
      memory: 4,
      disk: 20,
    },
  },
  {
    onSnapshotCreateLogs: console.log, // renamed callback
  }
);

// Creating from snapshot
const sandbox = await daytona.create({
  snapshot: "my-snapshot-name",
});
```

### Snapshot Service Operations

**After (v0.21.0):**
```typescript
await daytona.snapshot.create(params);
await daytona.snapshot.list();
await daytona.snapshot.get(snapshotName);
await daytona.snapshot.delete(snapshot);
```

### Selecting Target Region

**Before (v0.20.2):**
```typescript
const daytona: Daytona = new Daytona({
    target: SandboxTargetRegion.US
});
```

**After (v0.21.0):**
```typescript
const daytona: Daytona = new Daytona({
    target: "us"
});
```

### Sandbox Retrieval

**Before (v0.20.2):**
```typescript
const sandbox = daytona.getCurrentSandbox(id);
```

**After (v0.21.0):**
```typescript
const sandbox = daytona.get(id);
```

### Removed Deprecated Aliases for Sandbox Methods

**Before (v0.20.2):**
```typescript
const workspace = daytona.getCurrentWorkspace(id);

const dir = workspace.getWorkspaceRootDir();

const lsp = await workspace.createLspServer('typescript', 'workspace/project');
const symbols = await lsp.workspaceSymbols('TODO');

const info = Workspace.toWorkspaceInfo(apiWorkspace);
```

**After (v0.21.0):**
```typescript
const sandbox = daytona.get(id);

const dir = sandbox.getUserRootDir();

const lsp = await sandbox.createLspServer('typescript', 'workspace/project');
const symbols = await lsp.sandboxSymbols('TODO');

const info = Sandbox.toSandboxInfo(apiSandbox);
```

### Flattened Sandbox Properties

**Before (v0.20.2):**
```typescript
const state = sandbox.instance.state;
const autoStopInterval = sandbox.instance.autoStopInterval;
const domain = sandbox.instance.info?.nodeDomain;
```

**After (v0.21.0):**
```typescript
const state = sandbox.state;
const autoStopInterval = sandbox.autoStopInterval;
const domain = sandbox.runnerDomain;
```

### Refresh Functionality

**Before (v0.20.2):**
```typescript
// Get up-to-date sandbox info
const info = await sandbox.info();
```

**After (v0.21.0):**
```typescript
// Update sandbox with up-to-date info
await sandbox.refreshData();
```

### Removed Legacy Sandbox Properties

**Before (v0.20.2):**
```typescript
// Valid
const sandboxName = sandbox.instance.name
const sandboxClass = sandbox.instance.info?.class
```

**After (v0.21.0):**
```typescript
// Invalid
const sandboxName = sandbox.name;
const sandboxClass = sandbox.class
```

## Python Migration Patterns

### Creating Snapshots (Replace Image Creation)

**Before (v0.20.2):**
```python
# Creating a pre-built image
image_name = f"python-example:{int(time.time())}"
image = Image.debian_slim("3.12")
daytona.create_image(image_name, image, on_logs=print)

# Using the pre-built image
sandbox = daytona.create(CreateSandboxParams(image=image_name))
```

**After (v0.21.0):**
```python
# Creating a snapshot
snapshot_name = f"python-example:{int(time.time())}"
image = Image.debian_slim("3.12")
daytona.snapshot.create(
    CreateSnapshotParams(
        name=snapshot_name,
        image=image,
        resources=Resources(
            cpu=1,
            memory=1,
            disk=3,
        ),
    ),
    on_logs=print,
)

# Using the snapshot
sandbox = daytona.create(
    CreateSandboxFromSnapshotParams(snapshot=snapshot_name)
)
```

### Parameter Class Changes

**Before (v0.20.2):**
```python
# Basic creation
sandbox = daytona.create()

# From image name
params = CreateSandboxParams(
    image="ubuntu:22.04"
)
sandbox = daytona.create(params)

# From image object
params = CreateSandboxParams(
    image=Image.debian_slim("3.12")
)
sandbox = daytona.create(params, on_image_build_logs=print)

# With resources
params = CreateSandboxParams(
    resources=SandboxResources(cpu=1, memory=1, disk=3),
)
sandbox = daytona.create(params)
```

**After (v0.21.0):**
```python
# Basic creation (unchanged)
sandbox = daytona.create()

# From image string
params = CreateSandboxFromImageParams(
    image="ubuntu:22.04",
    resources=Resources(cpu=1, memory=1, disk=3),
)
sandbox = daytona.create(params)

# From image object
params = CreateSandboxFromImageParams(
    image=Image.debian_slim("3.12"),
    resources=Resources(cpu=1, memory=1, disk=3),
)
sandbox = daytona.create(params, timeout=150, on_snapshot_create_logs=print)

# Creating from snapshot
params = CreateSandboxFromSnapshotParams(
    snapshot="my-snapshot-name",
)
sandbox = daytona.create(params)
```

### Selecting Target Region

**Before (v0.20.2):**
```python
config = DaytonaConfig(
    target=SandboxTargetRegion.EU
)

daytona = Daytona(config)
```

**After (v0.21.0):**
```python
config = DaytonaConfig(
    target="eu"
)

daytona = Daytona(config)
```

### Sandbox Retrieval

**Before (v0.20.2):**
```python
sandbox = daytona.get_current_sandbox(id)
```

**After (v0.21.0):**
```python
sandbox = daytona.get(id)
```

### Removed Deprecated Aliases for Sandbox Methods

**Before (v0.20.2):**
```python
workspace = daytona.get_current_workspace(id)

dir = workspace.get_workspace_root_dir()

lsp = workspace.create_lsp_server("python", "workspace/project")
symbols = lsp.workspace_symbols("TODO")

workspace.wait_for_workspace_start()
workspace.wait_for_workspace_stop()
```

**After (v0.21.0):**
```python
sandbox = daytona.get(id)

dir = sandbox.get_user_root_dir()

lsp = sandbox.create_lsp_server("python", "workspace/project")
symbols = lsp.sandbox_symbols("TODO")

sandbox.wait_for_sandbox_start()
sandbox.wait_for_sandbox_stop()
```

### Flattened Sandbox Properties

**Before (v0.20.2):**
```python
state = sandbox.instance.state
auto_stop_interval = sandbox.instance.auto_stop_interval
domain = sandbox.instance.info.node_domain
```

**After (v0.21.0):**
```python
state = sandbox.state
auto_stop_interval = sandbox.auto_stop_interval
domain = sandbox.runner_domain
```

### Refresh Functionality

**Before (v0.20.2):**
```python
# Get up-to-date sandbox info
info = sandbox.info()
```

**After (v0.21.0):**
```python
# Update sandbox with up-to-date info
sandbox.refresh_data()
```

### Removed Legacy Sandbox Properties

**Before (v0.20.2):**
```python
# Valid
name = workspace.instance.name
class_name = workspace.instance.info.class_name
```

**After (v0.21.0):**
```python
# Invalid
name = workspace.name
class_name = workspace.class_name
```

### Snapshot Service Operations

**After (v0.21.0):**
```python
daytona.snapshot.create(params)
daytona.snapshot.list()
daytona.snapshot.get(snapshot_name)
daytona.snapshot.delete(snapshot)
```

## Migration Checklist

### TypeScript Migration Steps
- [ ] Replace `daytona.createImage()` → `daytona.snapshot.create()`
- [ ] Use `CreateSandboxFromImageParams` or `CreateSandboxFromSnapshotParams`
- [ ] Replace `SandboxResources` → `Resources`
- [ ] Rename `onImageBuildLogs` → `onSnapshotCreateLogs`
- [ ] Replace `SandboxTargetRegion` enum with plain string values
- [ ] Replace `daytona.getCurrentSandbox(id)` → `daytona.get(id)`
- [ ] Replace deprecated `daytona.getCurrentWorkspace(id)` → `daytona.get(id)`
- [ ] Replace `workspace.getWorkspaceRootDir()` → `sandbox.getUserRootDir()`
- [ ] Replace `lspServer.workspaceSymbols(query)` → `lspServer.sandboxSymbols(query)`
- [ ] Replace `Workspace.toWorkspaceInfo(apiWorkspace)` → `Sandbox.toSandboxInfo(apiSandbox)`
- [ ] Update sandbox property access from `sandbox.instance.*` to top-level properties
- [ ] Remove references to legacy properties (`sandbox.instance.name`, `sandbox.instance.info?.class`)
- [ ] Replace fetching info with `sandbox.info()` to updating sandbox object directly with `sandbox.refreshData()`

### Python Migration Steps
- [ ] Replace `daytona.create_image()` → `daytona.snapshot.create()`
- [ ] Import new classes: `CreateSnapshotParams`, `CreateSandboxFromImageParams`, `CreateSandboxFromSnapshotParams`, `Resources`
- [ ] Replace `CreateSandboxParams` with appropriate specific class
- [ ] Replace `SandboxResources` → `Resources`
- [ ] Rename `on_image_build_logs` → `on_snapshot_create_logs`
- [ ] Replace `SandboxTargetRegion` enum with plain string values
- [ ] Replace `daytona.get_current_sandbox(id)` → `daytona.get(id)`
- [ ] Replace deprecated `daytona.get_current_workspace(id)` → `daytona.get(id)`
- [ ] Replace `workspace.get_workspace_root_dir()` → `sandbox.get_user_root_dir()`
- [ ] Replace `lsp_server.workspace_symbols(query)` → `lsp_server.sandbox_symbols(query)`
- [ ] Replace `workspace.wait_for_workspace_start()` → `sandbox.wait_for_sandbox_start()`
- [ ] Replace `workspace.wait_for_workspace_stop()` → `sandbox.wait_for_sandbox_stop()`
- [ ] Update sandbox property access from `sandbox.instance.*` to top-level properties
- [ ] Remove references to legacy properties (`sandbox.instance.name`, `sandbox.instance.info.class_name`)
- [ ] Replace fetching info with `sandbox.info()` to updating sandbox object directly with `sandbox.refresh_data()`